#include <iostream>
#include <string>
#include <stack>
#include <cmath>
#include <queue>
using namespace std;

///binary search tree
class BinarySearchTree{
private:
    struct Node{
        int value;
        Node *left;
        Node *right;
        Node(int val){
            value=val;
            right=left=NULL;
        }
    };
    Node *root;
    int count;
    int getHighetHelper(Node* temp){
        if(temp==nullptr)
            return -1;
        int leftSubTree=getHighetHelper(temp->left);
        int rightSubTree=getHighetHelper(temp->right);
        
        return 1+max(leftSubTree,rightSubTree);
    }
public:
   
    BinarySearchTree(){
        root=NULL;
        count=0;
    }
    
    Node* getRoot(){
        return root;
    }
    
    void insert(int element){
        insert(element,root);
    }
    
    void insert(int element, Node *begin){
        if(begin == NULL)
        {
            begin=new Node(element);
            root=begin;
            count++;
        }else{
            Node *curr=begin;
            if(element<=curr->value)
            {
                if(curr->left == NULL)
                {
                    Node *newNodePtr=new Node(element);
                    curr->left=newNodePtr;
                    count++;
                }else{
                    insert(element,curr->left);
                }
            }
            
            if(element>curr->value)
            {
                if(curr->right == NULL)
                {
                    Node *newNodePtr=new Node(element);
                    curr->right=newNodePtr;
                    count++;
                }else{
                    insert(element,curr->right);
                }
            }
        }
    }
    
    void preOrderTravere(Node *root){
        if(root!=NULL){
            cout<<root->value<<" ";
            preOrderTravere(root->left);
            preOrderTravere(root->right);
        }
    }
    
    int getMin(){
        Node *curr=root;
        while(curr->left!=NULL)
            curr=curr->left;
        
        return curr->value;
    }
    
    int getMax(){
        Node *curr=root;
        while(curr->right !=NULL)
            curr=curr->right;
        
        return curr->value;
    }
    
    void search(int element){
        
        Node *curr=root;
        bool found=false;
        int depth=0;
        while(curr !=NULL)
        {
            if(element==curr->value){
                cout<<element<< " :Found\t/ Depth= "<<depth<<"\n";
                found=true;
                break;
            }
        else{
            if(element < curr->value)
                curr=curr->left;
            else
                curr=curr->right;
            depth++;
        }
        }
        if(found==false)
            cout<<element<<" :Not found\n";
    }
    
    //calculate height for any binary tree  h=1+max(L,R)
    int getHeight(){
        if(root==nullptr)
            return -1;
        else
        return getHighetHelper(root);
    }
    
    
    void breadthFirstTraverse(){
        if(root == nullptr) return;
        
        queue<Node*> q;
        q.push(root);
        
        while(!q.empty())
        {
            Node* current = q.front();
            q.pop();
            cout<<current->value<<" ";
            if(current->left != nullptr)
                q.push(current->left);
            if(current->right != nullptr)
                q.push(current->right);
        }
    }

};




int main(){
    BinarySearchTree bst;
    bst.insert(10);
    bst.insert(5);
    bst.insert(15);
    bst.insert(6);
    bst.insert(4);
    bst.insert(3);
    bst.insert(7);
    bst.insert(30);
    bst.insert(27);
    cout<<"pre-Order: ";
    bst.preOrderTravere(bst.getRoot());
    cout<<endl;
    cout<<"Min item: "<<bst.getMin()<<endl;
    cout<<"Max item: "<<bst.getMax()<<endl;
    bst.search(4);
    cout<<"Height: "<<bst.getHeight()<<endl;
    cout<<"Breadth-first: ";
    bst.breadthFirstTraverse();
    cout<<endl;
    
    
    return 0;
}